name: Debug EKS and ECR
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vprofile-eks

jobs:
  Debug:
    runs-on: ubuntu-latest
    steps:
      # AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Verify AWS CLI Installation
      - name: Verify AWS CLI Installation
        run: aws --version

      # Test EKS Cluster Access
      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
          kubectl cluster-info
          kubectl get nodes

      # Verify ECR Login
      - name: Test ECR Login
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REGISTRY }}

      # Create Kubernetes Secret for ECR
      - name: Create Kubernetes Secret
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=${{ secrets.REGISTRY }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }}) \
          || echo "Secret creation failed or already exists"

      # Verify Kubernetes Secrets
      - name: List Kubernetes Secrets
        run: kubectl get secrets -n default

      - name: Check Pods
        run: kubectl get pods -n default

      - name: Check Services
        run: kubectl get svc -n default

      - name: Check Ingress
        run: kubectl get ingress -n default

      - name: Describe Pods
        run: |
          for pod in $(kubectl get pods -n default -o name); do
            echo "Describing $pod"
            kubectl describe $pod -n default
          done

      - name: Check Pod Logs
        run: |
          for pod in $(kubectl get pods -n default -o name); do
            echo "Logs for $pod"
            kubectl logs $pod -n default
          done

      - name: Describe Services
        run: |
          for svc in $(kubectl get svc -n default -o name); do
            echo "Describing $svc"
            kubectl describe $svc -n default
          done

      - name: Describe Ingress
        run: |
          for ingress in $(kubectl get ingress -n default -o name); do
            echo "Describing $ingress"
            kubectl describe $ingress -n default
          done

      - name: Check Ingress Controller Logs
        run: |

          nginx_pod=$(kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller -o name | head -n 1)
          if [ -n "$nginx_pod" ]; then
            echo "Ingress Controller Logs for $nginx_pod"
            kubectl logs $nginx_pod -n ingress-nginx
          else
            echo "No ingress controller pod found in the ingress-nginx namespace."
          fi
      - name: Check Services and Endpoints
        run: |
          kubectl describe svc vprodb
          kubectl describe svc vprocache01
      
      - name: Verify Pod Connectivity
        run: |
          kubectl exec -it vprodb-69b467cd94-6gsgj -- curl http://vprodb:3306
          kubectl exec -it vpromc-58999459d8-xcdnl -- curl http://vprocache01:11211
        
      - name: Expose Application Service
        run: |
          kubectl patch svc my-app -p '{"spec": {"type": "LoadBalancer"}}'
        
      - name: Check Application Logs
        run: |
          kubectl logs vproapp-855546b95d-f9vkl
        
      - name: Validate Ingress Rules
        run: |
          kubectl describe ingress vpro-ingress


      
        

        